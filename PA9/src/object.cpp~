#include "object.h"
#include <assimp/Importer.hpp>
#include <assimp/scene.h>
#include <assimp/postprocess.h>
#include <assimp/color4.h>
#include <Magick++.h>
#include <btBulletDynamicsCommon.h>
#include <iostream>

using namespace Magick;

Object::Object(std::string vFile, std::string fFile, std::string mFile, bool usingTriMesh, btTriangleMesh *objTriMesh)
{  
  InitializeMagick(NULL);
  
  vertexFile = vFile;
  fragmentFile = fFile;
  modelFile = mFile;
  
  //std::cout << "1?" << std::endl; 

  Assimp::Importer importer;
  const aiScene* scene = importer.ReadFile(modelFile, aiProcess_Triangulate | aiProcess_GenSmoothNormals | aiProcess_FlipUVs 
                                       | aiProcess_JoinIdenticalVertices);

  aiMesh* mesh = scene->mMeshes[0];


  for(unsigned int i=0;i< mesh->mNumVertices;i++)
  {
    const aiVector3D* pos = &(mesh->mVertices[i]);
    const aiVector3D* norm = &(mesh->mNormals[i]);

    v.vertex = glm::vec3 {pos->x,pos->y,pos->z};

    Vertices.push_back(v);

    v.vertex = glm::vec3 {norm->x,norm->y,norm->z};
    Normals.push_back(v);


  }



  //std::cout << "3?" << std::endl;
  btVector3 triArray[3];

  for(unsigned int i=0;i<mesh->mNumFaces;i++)
  {
    const aiFace& face = mesh->mFaces[i];
    assert(face.mNumIndices ==3);
    
    if(usingTriMesh == true)
        {
         aiVector3D position = mesh->mVertices[face.mIndices[0]];
         triArray[0] = btVector3(position.x, position.y, position.z);

         position = mesh->mVertices[face.mIndices[1]];
         triArray[1] = btVector3(position.x, position.y, position.z);

         position = mesh->mVertices[face.mIndices[2]];
         triArray[2] = btVector3(position.x, position.y, position.z);

         objTriMesh->addTriangle(triArray[0], triArray[1], triArray[2]);
        }

    Indices.push_back(face.mIndices[0]);
    Indices.push_back(face.mIndices[1]);
    Indices.push_back(face.mIndices[2]);   
  }

  //std::cout << "4?" << std::endl;

  aiString mat;
  scene->mMaterials[1]->GetTexture(aiTextureType_DIFFUSE,0,&mat);
  //std::cout << "sgh" << std::endl;
  std::string matFile = mat.C_Str();
  std::string m_fileName = "../models/"+matFile;
  m_image.read(m_fileName);
  m_image.write(&m_blob, "RGBA");

  //std::cout << "5?" << std::endl;
  glGenBuffers(1, &VB);
  glBindBuffer(GL_ARRAY_BUFFER, VB);
  glBufferData(GL_ARRAY_BUFFER, sizeof(Vertex) * Vertices.size(), &Vertices[0], GL_STATIC_DRAW);

  //std::cout << "6?" << std::endl;

  glGenBuffers(1, &IB);
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IB);
  glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(unsigned int) * Indices.size(), &Indices[0], GL_STATIC_DRAW);


  glGenBuffers(1, &NB);
  glBindBuffer(GL_ARRAY_BUFFER, NB);
  glBufferData(GL_ARRAY_BUFFER, sizeof(Vertex) * Normals.size(), &Normals[0], GL_STATIC_DRAW);

  //std::cout << "7?" << std::endl;
}

Object::~Object()
{

}

void Object::Update(unsigned int dt, glm::mat4 location)
    {
     model = location;
    }

glm::mat4 Object::GetModel()
{
  return model;
}

void Object::Render()
{
  glGenTextures(1, &m_texObj);
  glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, m_image.columns(), m_image.rows(), 0, GL_RGBA, GL_UNSIGNED_BYTE, m_blob.data());
  glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
  glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);  
  glBindTexture(GL_TEXTURE_2D, m_texObj);


  glDeleteTextures(1, &m_texObj);


  glEnableVertexAttribArray(0);
  glEnableVertexAttribArray(1);
  glEnableVertexAttribArray(2);

  glBindBuffer(GL_ARRAY_BUFFER, VB);
  glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), 0);
  glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)offsetof(Vertex,uv));

  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IB);

  glDrawElements(GL_TRIANGLES, Indices.size(), GL_UNSIGNED_INT, 0);

  //glBindBuffer(GL_NORMAL_ARRAY_BUFFER_BINDING, NB);


   GLfloat mat_s[] = { 1.0, 1.0, 1.0, 1.0 };
   GLfloat mat_sh[] = { 50.0 };
   GLfloat mat_a[] = {1,1,1,1};
   GLfloat mat_d[] = {1,1,1,1};
   GLfloat light_p[] = { 10.0, 10.0, 0.0, 1.0 };

   glLightf(GL_LIGHT0,GL_SPOT_CUTOFF, 20.0);	
   //glLightfv(GL_FRONT, GL_AMBIENT, mat_a);
   glLightfv(GL_FRONT, GL_DIFFUSE, mat_d);
   glLightfv(GL_FRONT, GL_SPECULAR, mat_s);
   glLightfv(GL_FRONT, GL_SHININESS, mat_sh);
   glLightfv(GL_LIGHT0, GL_POSITION, light_p);
   glLightfv(GL_LIGHT0,GL_SPOT_EXPONENT, mat_a);
   glLightf(GL_LIGHT0, GL_LINEAR_ATTENUATION, 1.0);
   

glShadeModel(GL_SMOOTH);
glEnable(GL_COLOR_MATERIAL);
glEnable(GL_LIGHT0);
glEnable(GL_LIGHTING);


  glDisableVertexAttribArray(0);
  glDisableVertexAttribArray(1);
  glDisableVertexAttribArray(2);
}

glm::mat4 Object::GetLocation()
{
  return location;
}
